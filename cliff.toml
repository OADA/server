# git-cliff ~ configuration file
# https://git-cliff.org/docs/configuration

[remote.github]
owner = "OADA"
repo = "server"

[bump]
features_always_bump_minor = true
breaking_always_bump_major = true

[changelog]
# A Tera template to be rendered for each release in the changelog.
# See https://keats.github.io/tera/docs/#introduction
header = """
<!-- deno-fmt-ignore-file -->\
<!-- NB: AUTO GENERATED FILE -->\
<!-- markdownlint-disable line-length no-duplicate-heading -->\
\n# Changelog\n
All notable changes to this project will be documented in this file.
See [conventional commits](https://www.conventionalcommits.org/) for commit guidelines.
"""
body = """
\n---
{% if version %}
    {% if previous.version -%}
        ## [{{ version | trim_start_matches(pat="v") }}]($REPO/compare/{{ previous.version }}..{{ version }}) — {{ timestamp | date(format="%Y-%m-%d") }}
    {% else -%}
        ## [{{ version | trim_start_matches(pat="v") }}] — {{ timestamp | date(format="%Y-%m-%d") }}
    {%- endif -%}
{%- else -%}
    ## [unreleased]
{%- endif -%}
{%- for group, commits in commits | group_by(attribute="group") %}
    ### {{ group | striptags | trim | upper_first }}
    {% set_global unscoped = false %}
    {%- for commit in commits -%}
        {%- if commit.scope -%}
        {%- else %}
            - {% if commit.breaking %}[**breaking**] {% endif -%}\
                {{ commit.message }} — ([{{ commit.id | truncate(length=7, end="") }}]($REPO/commit/{{ commit.id }}))
          {%- set_global unscoped = true -%}
        {%- endif -%}
    {%- endfor -%}
    {%- if unscoped -%}
      {%- raw %}\n{% endraw -%}
    {%- endif -%}
    {%- for group, commits in commits | group_by(attribute="scope") -%}
      {%- if group %}
        #### {{ group | striptags | trim | upper_first }}\n
        {% for commit in commits -%}
            - {% if commit.breaking %}[**breaking**] {% endif -%}\
                {{ commit.message }} — ([{{ commit.id | truncate(length=7, end="") }}]($REPO/commit/{{ commit.id }}))
        {% endfor -%}
      {%- endif -%}
    {%- endfor -%}
{%- endfor -%}
"""
footer = "<!-- generated by git-cliff -->"
# Remove leading and trailing whitespaces from the changelog's body.
trim = true
# Render body even when there are no releases to process.
render_always = true
# An array of regex based postprocessors to modify the changelog.
postprocessors = [
  # Replace the placeholder <REPO> with a URL.
  { pattern = '\$REPO', replace = "https://github.com/OADA/server" },
  { pattern = '\<dep\>', replace = "dependency" },
  { pattern = '\<deps\>', replace = "dependencies" },
  { pattern = '\<Deps\>', replace = "Dependencies" },
  { pattern = '\<[Aa]rango\>', replace = "ArangoDB" },
  { pattern = '\<redpanda\>', replace = "Redpanda" },
  { pattern = '\<loki\>', replace = "Loki" },
  { pattern = '\<[hH]ttp\>', replace = "HTTP" },
  { pattern = '\<[oO]ada\>', replace = "OADA" },
  { pattern = '\<[oO]((idc)|(IDC))\>', replace = "OpenID Connect" },
]
# output file path
#output = "CHANGELOG.md"

[git]
# Release semver tags
tag_pattern = '^v\d+\.\d+\.\d+$'
# Parse commits according to the conventional commits specification.
# See https://www.conventionalcommits.org
conventional_commits = true
# Exclude commits that do not match the conventional commits specification.
filter_unconventional = false
# Require all commits to be conventional.
# Takes precedence over filter_unconventional.
require_conventional = false
# Split commits on newlines, treating each line as an individual commit.
split_commits = false
# An array of regex based parsers to modify commit messages prior to further processing.
commit_preprocessors = [
  # Replace issue numbers with link templates to be updated in `changelog.postprocessors`.
  { pattern = '\((\w+\s)?#([0-9]+)\)', replace = "([#${2}]($REPO/issues/${2}))" },
  # Check spelling of the commit message using https://github.com/crate-ci/typos.
  # If the spelling is incorrect, it will be fixed automatically.
  { pattern = '.*', replace_command = 'typos --write-changes -' },
  { pattern = '\(chart\)', replace = "(helm)" },
]
# Prevent commits that are breaking from being excluded by commit parsers.
protect_breaking_commits = true
# An array of regex based parsers for extracting data from the commit message.
# Assigns commits to groups.
# Optionally sets the commit's scope and can decide to exclude commits from further processing.
commit_parsers = [
  { message = "^chore\\(pr\\)", skip = true },
  { message = "^Merge pull request #", skip = true },
  { message = "^chore\\(pull\\)", skip = true },
  { message = "^chore\\(release\\): prepare for", skip = true },
  { message = ".*security|.*snyk", group = "<!-- 0 -->🛡️ Security", scope = "" },
  { message = "^feat", group = "<!-- 1 -->🚀 Features" },
  { message = "^fix", group = "<!-- 2 -->🐛 Bug Fixes" },
  { message = "^perf", group = "<!-- 3 -->⚡ Performance" },
  { message = "^chore\\(deps\\)", group = "<!-- 4 --> Dependencies", scope = "" },
  { message = "^doc", group = "<!-- 5 -->📚 Documentation" },
  { message = "^refactor", group = "<!-- 6 -->🚜 Refactor" },
  { message = "^style", group = "<!-- 7 -->🎨 Styling" },
  { message = "^test", group = "<!-- 8 -->🧪 Testing" },
  { message = "^chore", group = "<!-- 9 -->⚙️ Miscellaneous Tasks" },
  { message = "^ci|^build", group = "<!-- 10 -->⚙️ Continuous Integration" },
  { message = "^revert", group = "<!-- 11 -->◀️ Revert" },
  { message = ".*", group = "<!-- 12 -->💼 Other" },
  # { field = "scope", pattern = "helm|chart", scope = "helm chart" },
]
# Exclude commits that are not matched by any commit parser.
filter_commits = false
# An array of link parsers for extracting external references, and turning them into URLs, using regex.
link_parsers = []
# Include only the tags that belong to the current branch.
use_branch_tags = false
# Order releases topologically instead of chronologically.
topo_order = false
# Order releases topologically instead of chronologically.
topo_order_commits = true
# Order of commits in each group/release within the changelog.
# Allowed values: newest, oldest
sort_commits = "oldest"
# Process submodules commits
recurse_submodules = false
