replicaCount: 1

ingress:
  # ingress.enabled is whether to create ingresses for this OADA instance
  enabled: true
  # ingress.className is the ingress class to use for created ingresses
  className: ~

oada:
  # oada.domains is the domain(s) for this OADA instance
  domains: []
  # oada.tag is the Docker tag for the OADA images
  tag: ~
  imagePullPolicy: IfNotPresent
  # oada.services is a map of oada services to deploy
  services:
    http-handler:
      http: true
    well-known:
      http: true
    auth:
      http: true
    shares: {}
    rev-graph-update: {}
    sync-handler: {}
    users: {}
    webhooks: {}
    write-handler: {}
  # oada.externalServices is a map of oada-compatible services to deploy with this OADA instance
  externalServices:
    #uservice:
    #  image: qlever/uservice
    #  tag: build
  # oada.users is a list of users to be created
  users:
    - name: admin
      admin: true
      scope:
        - all:all
        - oada.admin.user:all
  # oada.rateLimit configures rate-limits for OADA API clients
  rateLimit:
    # oada.rateLimit.enabled is whether to enable rate-limiting in the http-handler
    enabled: true # disable this if the gateway/reverse-proxy handles your rate-limits
    useDraftSpec: false
    # oada.rateLimit.timeWindow is the time window for rate-limiting
    timeWindow: 1 second
    # oada.rateLimit.max is the maximum number of requests per client in a given timeWindow
    max:
      reads: 20
      writes: 5
  # oada.resources are the resource requests/limits for the OADA services
  resources:
    limits:
      ephemeral-storage: 512Mi
    requests:
      cpu: 20m
      memory: 128Mi

oauth:
  # OAuth 2.0 issuer to use for auth.
  # Issuer must support OpenID Connect Discovery 1.0.
  # If not set, defaults to the internal OADA auth server.
  issuer: ~

# debug is the list of debug.js namespaces to enable/disable
debug:
  - '*'

pino:
  # pino.level is the level of messages to send to the pino transport
  level: info
  loki:
    url: '' #http://loki.monitoring:3100

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  targetMemoryUtilizationPercentage: 80

arangodb:
  # arangodb.database is the ArangoDB database to use
  database: oada
  # arangodb.connection is a URI of an external ArangoDB server.
  # If this is set, the ArangoDB service will not be deployed.
  # If this is not set, the kube-arango operator will be used to deploy a cluster.
  connection: ''
  # arangodb.image is the Docker image to use for arangodb
  image: arangodb/arangodb
  # arangodb.tag is the Docker tag for the ArangoDB images
  tag: 3.10.5
  # arangodb.profile is whether to enable ArangoDB query profiling
  profileAql: ~ # 0/false, 1/true, or 2 (also include stats and plan)
  # arangodb.resources are the resource requests/limits for the ArangoDB service
  resources:
    limits:
      cpu: 100m
      memory: 1Gi
      ephemeral-storage: 1Gi

kafka:
  # kafka.brokers is an array of an external Kafka brokers.
  # If this is not empty, the Redpanda service will not be deployed.
  # If this is empty, the redpanda operator will be used to deploy a cluster.
  brokers: []
  # kafka.image is the Docker image to use for Kafka
  image: docker.redpanda.com/vectorized/redpanda
  # kafka.tag is the Docker tag for the Kafka/Redpanda images
  tag: v23.1.2

k8sWaitFor:
  image: groundnuty/k8s-wait-for
  tag: no-root-v2.0
  resources:
    limits:
      cpu: 10m
      memory: 128Mi

# prometheus is whether to add prometheus monitors for oada
prometheus: ~

grafana:
  enabled: true
  dashboards:
    label: grafana_dashboard
    value: 1

nameOverride: ~
fullnameOverride: ~

global:
  # global.development is whether to enable development/debug features not meant for production use
  development: false
