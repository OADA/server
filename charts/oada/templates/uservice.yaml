{{/* vim: set ft=helm : */}}
{{/*
   * Copyright 2023 Open Ag Data Alliance
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *     http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */}}
{{- range $k, $v := .Values.oada.externalServices -}}
{{/* Deploy external OADA services `$k` */}}
{{- $name := print $k "-" $.Release.Name -}}
{{- if ne $v.enabled false }}
apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: {{ $.Release.Namespace }}
  name: {{ $name }}
  labels:
    app.kubernetes.io/component: {{ $k }}
    {{- include "oada.chart.labels" $ | nindent 4 }}
spec:
  {{- if not $.Values.autoscaling.enabled }}
  replicas: {{ $.Values.replicaCount }}
  {{- end }}
  selector:
    matchLabels:
      app.kubernetes.io/component: {{ $k }}
      {{- include "oada.chart.selectorLabels" $ | nindent 6 }}
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app.kubernetes.io/component: {{ $k }}
        {{- include "oada.chart.selectorLabels" $ | nindent 8 }}
    spec:
      serviceAccountName: service-account-{{ $.Release.Name }}
      initContainers:
        - name: wait-for-api
          image: {{ $.Values.k8sWaitFor.image }}:{{ $.Values.k8sWaitFor.tag }}
          args:
            - service
            - http-handler-{{ $.Release.Name }}
          resources:
            limits:
              {{- toYaml $.Values.k8sWaitFor.resources.limits | nindent 14 }}
            requests:
              {{- toYaml $.Values.k8sWaitFor.resources.limits | nindent 14 }}
          securityContext:
            #runAsUser: 1000 # run as user node (uid 1000)
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
      containers:
        - envFrom:
            - configMapRef:
                name: {{ $.Chart.Name }}-configmap-{{ $.Release.Name }}
            {{- if $v.envFrom }}
              {{- toYaml $v.envFrom | nindent 12 -}}
            {{- end }}
          env:
            - name: DOMAIN
              value: http://http-handler-{{ $.Release.Name }}:80
            {{- if $v.env }}
              {{- toYaml $v.env | nindent 12 -}}
            {{- end }}
          image: {{ print $v.image ":" $v.tag }}
          imagePullPolicy: IfNotPresent
          {{/*
          # TODO: Better liveness checks
          livenessProbe:
            httpGet:
              port: prometheus
            initialDelaySeconds: 10
            periodSeconds: 10
          securityContext:
            runAsNonRoot: true
            # runAsUser: 1000 # run as user node (uid 1000)
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
          */}}
          name: {{ $name }}
          resources:
            {{- toYaml $.Values.oada.resources | nindent 12 }}
          ports:
            {{ if $.Values.global.development -}}
            - name: inspect
              containerPort: 9229
            {{- end }}
            - name: prometheus
              containerPort: 3000
          volumeMounts:
            - mountPath: /tmp
              name: tmp
      volumes:
        - name: tmp
          emptyDir:
            sizeLimit: 1Gi
            #medium: Memory
      restartPolicy: Always
{{- if $.Values.autoscaling.enabled }}
---
apiVersion: autoscaling/v2beta1
kind: HorizontalPodAutoscaler
metadata:
  namespace: {{ $.Release.Namespace }}
  name: {{ $name }}
  labels:
    app.kubernetes.io/component: {{ $k }}
    {{- include "oada.chart.labels" $ | nindent 4 }}
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: {{ $name }}
  minReplicas: {{ $.Values.autoscaling.minReplicas }}
  maxReplicas: {{ $.Values.autoscaling.maxReplicas }}
  metrics:
    {{- if $.Values.autoscaling.targetCPUUtilizationPercentage }}
    - type: Resource
      resource:
        name: cpu
        targetAverageUtilization: {{ $.Values.autoscaling.targetCPUUtilizationPercentage }}
    {{- end }}
    {{- if $.Values.autoscaling.targetMemoryUtilizationPercentage }}
    - type: Resource
      resource:
        name: memory
        targetAverageUtilization: {{ $.Values.autoscaling.targetMemoryUtilizationPercentage }}
    {{- end }}
{{- end }}
{{- if eq (include "oada.prometheus" $) "true" }}
---
apiVersion: monitoring.coreos.com/v1
kind: PodMonitor
metadata:
  namespace: {{ $.Release.Namespace }}
  name: {{ $name }}
  labels:
    app.kubernetes.io/component: {{ $k }}
    {{- include "oada.chart.labels" $ | nindent 4 }}
spec:
  selector:
    matchLabels:
      app.kubernetes.io/component: {{ $k }}
      {{- include "oada.chart.selectorLabels" $ | nindent 6 }}
  podMetricsEndpoints:
  - port: prometheus
  namespaceSelector:
    any: false
{{- end }}
---
{{ end -}}
{{ end -}}
