server {
  listen 443;

  server_name ${DOMAIN};

  ssl on;
  ssl_certificate /certs/${DOMAIN}/fullchain.pem;
  ssl_certificate_key /certs/${DOMAIN}/privkey.pem;

  location /oadaauth {
    # apply rate limiting
    # limit_req zone=oada burst=5 nodelay;

    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $remote_addr;
    proxy_set_header X-Forwarded-Proto $scheme;
    proxy_set_header Host $host;
    # 127.0.0.11 is the docker DNS server
    resolver 127.0.0.11 [::1]:5353 valid=15s;
    set $proxy "http://auth:80";
    proxy_pass $proxy;
    # Don't rewrite oadaauth because auth service knows about prefix
    # rewrite ^/oadaauth/(.*) /$1 break;
  }

  location /.well-known/acme-challenge {
    root /var/www/letsencrypt;
  }

  location /.well-known {
    # apply rate limiting
    # limit_req zone=oada burst=5 nodelay;

    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $remote_addr;
    proxy_set_header X-Forwarded-Proto $scheme;
    proxy_set_header Host $host;
    # 127.0.0.11 is the docker DNS server
    resolver 127.0.0.11 [::1]:5353 valid=15s;
    set $proxy "http://well-known:80";
    proxy_pass $proxy;
  }

  location / {
    # apply rate limiting
    # limit_req zone=oada burst=5 nodelay;

    # need these three lines for web sockets:
    proxy_http_version 1.1;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection "upgrade";
    # end web sockets addition
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $remote_addr;
    proxy_set_header X-Forwarded-Proto $scheme;
    proxy_set_header Host $host;
    resolver 127.0.0.11 [::1]:5353 valid=15s;
    set $proxy "http://http-handler:80";
    proxy_pass $proxy;
  }

  # In order for a microservice to add it's own location,
  # we can just include all of them here in this server
  # block and they will override any locations above as 
  # well as add any locations defined in those files.
  include /etc/nginx/additional-locations/*;
}

server {
  listen 80;
  server_name ${DOMAIN};

  # For let's encrypt, serve the web root that it will
  # put things into:
  location /.well-known/acme-challenge {
    root /var/www/letsencrypt;
  }

  # Everything else rewrite to HTTPS
  location / {
    # apply rate limiting
    # limit_req zone=oada burst=5 nodelay;
    rewrite ^/(.*) https://${DOMAIN}/$1 permanent;
  }
}

server {
  listen 80;

  # for internal services:
  server_name proxy;

  location /oadaauth {
    # apply rate limiting
    # limit_req zone=oada burst=5 nodelay;

    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $remote_addr;
    proxy_set_header X-Forwarded-Proto $scheme;
    proxy_set_header Host $host;
    # 127.0.0.11 is the docker DNS server
    resolver 127.0.0.11 [::1]:5353 valid=15s;
    set $proxy "http://auth:80";
    proxy_pass $proxy;
    # Don't rewrite oadaauth because auth service knows about prefix
    # rewrite ^/oadaauth/(.*) /$1 break;
  }

  location /.well-known {
    # apply rate limiting
    # limit_req zone=oada burst=5 nodelay;

    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $remote_addr;
    proxy_set_header X-Forwarded-Proto $scheme;
    proxy_set_header Host $host;
    # 127.0.0.11 is the docker DNS server
    resolver 127.0.0.11 [::1]:5353 valid=15s;
    set $proxy "http://well-known:80";
    proxy_pass $proxy;
  }

  location / {
    # apply rate limiting
    # limit_req zone=oada burst=5 nodelay;

    # need these three lines for web sockets:
    proxy_http_version 1.1;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection "upgrade";
    # end web sockets addition
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $remote_addr;
    proxy_set_header X-Forwarded-Proto $scheme;
    proxy_set_header Host $host;
    resolver 127.0.0.11 [::1]:5353 valid=15s;
    set $proxy "http://http-handler:80";
    proxy_pass $proxy;
  }
}
