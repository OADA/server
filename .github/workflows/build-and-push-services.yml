name: Build and push OADA images

on:
  push:
  pull_request:

jobs:
  setup:
    runs-on: ubuntu-latest

    outputs:
      services: ${{ steps.services.outputs.list }}
      version: ${{ steps.ref.outputs.version }}
      release: ${{ steps.ref.outputs.release }}
      major: ${{ steps.semver.outputs.major }}
      minor: ${{ steps.semver.outputs.minor }}
      patch: ${{ steps.semver.outputs.patch }}
      prerelease: ${{ steps.semver.outputs.prerelease }}
      build: ${{ steps.semver.outputs.build }}

    steps:
      - name: Checkout
        uses: actions/checkout@v2.3.4

      - name: Find Services
        id: services
        run: |
          SERVICES=$(ls -1 oada/services | tr '\n' ',' | sed 's/,/","/g' | sed 's/^/["/' | sed 's/,"$/]/')
          echo ::set-output name=list::${SERVICES}

      - name: Parse Ref
        id: ref
        run: |
          echo 'Processing git ref:' $GITHUB_REF

          # Release version is just the release number
          if [[ $GITHUB_REF == refs/heads/release/* ]]; then
            VERSION=${GITHUB_REF#refs/heads/release/}
            #RELEASE=true

          elif [[ $GITHUB_REF == refs/tags/* ]]; then
            if [[ $GITHUB_REF == refs/tags/v* ]]; then
              VERSION=${GITHUB_REF#refs/tags/v}
              RELEASE=true
            else
              VERSION=tag-${GITHUB_REF#refs/tags/}
            fi

          # Branch version is branch name (with '/' -> '-')
          elif [[ $GITHUB_REF == refs/heads/* ]]; then
            VERSION=$(echo ${GITHUB_REF#refs/heads/} | sed -r 's#/+#-#g')

            # Expect for the default_branch, which gets version "next"
            if [ "$VERSION" == "${{ github.event.repository.default_branch }}" ]; then
              VERSION=next
            fi

          # PR versions are pr-<github pr number>
          elif [[ $GITHUB_REF == refs/pull/* ]]; then
            VERSION=pr-${{ github.event.number }}

          else
            echo ::error ::Can not determine version of service -- unexpected job trigger? Stopping.
            exit 1
          fi

          echo ::set-output name=version::${VERSION}
          echo ::set-output name=release::${RELEASE}

      - name: Parse Semver
        id: semver
        if: ${{ steps.ref.outputs.release }}
        uses: booxmedialtd/ws-action-parse-semver@v1.3.1
        with:
          input_string: ${{ steps.ref.outputs.version }}
          #version_extractor_regex: '\/v(.*)$'

  build-and-push-services:
    needs: setup

    strategy:
      # Only run one build at a time to fix layer reuse?
      max-parallel: 1
      matrix:
        service: ${{ fromJson(needs.setup.outputs.services) }}
        context:
          - oada
        include:
          - service: support/proxy
            context: support/proxy

    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2.3.4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1.2.0

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1.3.0
        with:
          version: latest

      - name: Builder instance name
        run: echo ${{ steps.buildx.outputs.name }}

      - name: Available platforms
        run: echo ${{ steps.buildx.outputs.platforms }}

      - name: Cache docker layers
        if: ${{ !env.ACT }} # Awaiting ACT version after 0.2.17 for this feature
        uses: actions/cache@v2.1.6
        id: cache
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}-${{ matrix.service }}
          restore-keys: |
            ${{ runner.os }}-buildx-${{ github.sha }}-
            ${{ runner.os }}-buildx-

      - name: Prepare Tags
        id: prepare
        run: |
          # Doesn't like upper case
          OWNER=$(echo ${{ github.repository_owner }} | tr '[:upper:]' '[:lower:]')
          # Name on DockerHub (doesn't like extra / in images?)
          DOCKER_IMAGE=${OWNER}/$(echo ${{ matrix.service }} | tr '/' '-')
          # Name on GHCR
          GHCR_IMAGE=ghcr.io/${OWNER}/${{ matrix.service}}

          TAGS="${DOCKER_IMAGE}:${{ needs.setup.outputs.version }}"
          TAGS="$TAGS,${GHCR_IMAGE}:${{ needs.setup.outputs.version }}"
          if [[ "${{ needs.setup.outputs.release }}" ]]; then
            if [[ "${{ needs.setup.outputs.prerelease }}" ]]; then
              TAGS="${DOCKER_IMAGE}:${{ needs.setup.outputs.major }}.${{ needs.setup.outputs.minor }}.${{ needs.setup.outputs.patch }}-${{ needs.setup.outputs.prerelease }}"
              TAGS="$TAGS,${GHCR_IMAGE}:${{ needs.setup.outputs.major }}.${{ needs.setup.outputs.minor }}.${{ needs.setup.outputs.patch }}-${{ needs.setup.outputs.prerelease }}"
              # TODO: Keep old prerelease builds?
            else
              TAGS="$TAGS,${DOCKER_IMAGE}:latest"
              TAGS="$TAGS,${GHCR_IMAGE}:latest"
              TAGS="$TAGS,${DOCKER_IMAGE}:${{ needs.setup.outputs.major }}"
              TAGS="$TAGS,${GHCR_IMAGE}:${{ needs.setup.outputs.major }}"
              TAGS="$TAGS,${DOCKER_IMAGE}:${{ needs.setup.outputs.major }}.${{ needs.setup.outputs.minor }}"
              TAGS="$TAGS,${GHCR_IMAGE}:${{ needs.setup.outputs.major }}.${{ needs.setup.outputs.minor }}"
            fi
          fi

          if [ "${{ github.event_name }}" = "push" ]; then
            TAGS="$TAGS,${DOCKER_IMAGE}:sha-${GITHUB_SHA::8}"
            TAGS="$TAGS,${GHCR_IMAGE}:sha-${GITHUB_SHA::8}"
          fi

          echo ::set-output name=tags::${TAGS}
          echo ::set-output name=created::$(date -u +'%Y-%m-%dT%H:%M:%SZ')

          echo ${{ github.event.repository.license }}

      - name: Login to DockerHub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v1.9.0
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Login to GitHub Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v1.9.0
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push to images
        uses: docker/build-push-action@v2.5.0
        with:
          context: ${{ matrix.context }}
          file: ${{ matrix.context }}/Dockerfile
          platforms: linux/amd64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.prepare.outputs.tags }}
          build-args: |
            VERSION=${{ steps.prepare.outputs.version }}
            BUILD_DATE=${{ steps.prepare.outputs.created }}
            GIT_REF=${{ github.sha }}
            OADA_SERVICE=${{ matrix.service }}
          labels: |
            org.opencontainers.image.title=${{ matrix.service }}
            org.opencontainers.image.description=An OADA microservice
            org.opencontainers.image.url=${{ github.event.repository.html_url }}
            org.opencontainers.image.source=${{ github.event.repository.clone_url }}
            org.opencontainers.image.version=${{ needs.setup.outputs.version }}
            org.opencontainers.image.created=${{ steps.prepare.outputs.created }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.licenses=${{ github.event.repository.license.spdx_id }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache

  # Use Snyk to check service docker images
  snyk-services:
    needs:
      - setup
      - build-and-push-services

    strategy:
      matrix:
        service: ${{ fromJson(needs.setup.outputs.services) }}
        context:
          - oada
        include:
          - service: support/proxy
            context: support/proxy

    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2.3.4

      - name: Find Docker tag for Snyk
        id: tag
        run: |
          # Doesn't like upper case
          OWNER=$(echo ${{ github.repository_owner }} | tr '[:upper:]' '[:lower:]')
          # Name on DockerHub (doesn't like extra / in images?)
          #DOCKER_IMAGE=${OWNER}/$(echo ${{ matrix.service }} | tr '/' '-')
          # Name on GHCR
          GHCR_IMAGE=ghcr.io/${OWNER}/${{ matrix.service}}

          TAG="${GHCR_IMAGE}:next"
          if [[ "${{ needs.setup.outputs.release }}" ]]; then
            if [[ "${{ needs.setup.outputs.prerelease }}" ]]; then
            else
              TAG="${GHCR_IMAGE}:latest"
            fi
          else
          fi

          echo ::set-output name=tag::${TAG}
          echo ::set-output name=cur::${GHCR_IMAGE}:sha-${GITHUB_SHA::8}

      - name: Monitor Service image with Snyk
        uses: snyk/actions/docker@master
        # Don't break workflow on errros?
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          command: container monitor
          image: ${{ steps.tag.tag }}
          args: --org=${{ github.repository_owner }} --file=${{ matrix.context }}/Dockerfile

      - name: Test current Service image with Snyk
        uses: snyk/actions/docker@master
        # Don't break workflow on errros?
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          image: ${{ steps.tag.cur }}
          args: --org=${{ github.repository_owner }} --file=${{ matrix.context }}/Dockerfile

      - name: Secure Code Warrior
        uses: SecureCodeWarrior/github-action-add-sarif-contextual-training@v1
        with:
          inputSarifFile: ./snyk.sarif
          outputSarifFile: ./securecodewarrior.sarif

      # Don't push to github thing? Keeps making duplicates.
      # TODO: Maybe fix it one day...
      #- name: Upload SARIF file to GitHub Code Scanning
      #  uses: github/codeql-action/upload-sarif@v1
      #  with:
      #    #sarif_file: ./securecodewarrior.sarif
      #    sarif_file: ./snyk.sarif

  # Create a "release" compose file and attack it to a draft GitHub release.
  # TODO: Disallow relase if high severity vulnerabilities, failing tests, etc.?
  create-release:
    needs:
      - setup
      - build-and-push-services

    if: ${{ needs.setup.outputs.release }}

    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2.3.4

      - name: Set up yq
        uses: chrisdickinson/setup-yq@latest
        with:
          yq-version: v4.5.1

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1.2.0

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1.3.0
        with:
          version: latest

      - name: Cache docker layers
        if: ${{ !env.ACT }} # Awaiting ACT version after 0.2.17 for this feature
        uses: actions/cache@v2.1.6
        id: cache
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}-${{ matrix.service }}
          restore-keys: |
            ${{ runner.os }}-buildx-${{ github.sha }}-
            ${{ runner.os }}-buildx-

      - name: Login to DockerHub
        uses: docker/login-action@v1.9.0
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1.9.0
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Get Release Compose File
        id: release
        run: |
          RELEASE=docker-compose.release.yml

          # Use commit of release as version??
          OADA_VERSION="sha-${GITHUB_SHA::8}" \
            RELEASE_VERSION="${{ needs.setup.outputs.version }}" \
            ./release/make.sh | tee $RELEASE

          echo ::set-output name=composefile::$RELEASE

      # TODO: More detailed check?
      - name: Verify Compose File
        run: docker-compose -f ${{ steps.release.outputs.composefile }} config

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1.1.4
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ needs.setup.outputs.version }}
          # Make draft and wait for person to release it?
          draft: true
          prerelease: ${{ !!needs.setup.outputs.prerelease }}

      - name: Upload Release Compose File
        id: upload-release-asset
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ steps.release.outputs.composefile }}
          asset_name: docker-compose.yml
          asset_content_type: application/yaml
